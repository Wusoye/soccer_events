<%- include('include/header') -%>

<% 

function im_good(my_number){
    var res;
    if(parseFloat(my_number) > -35){
        res = "table-success";
    }
    else if(parseFloat(my_number) > -40){
        res = "table-warning";
    }
    else if(parseFloat(my_number) <= -40){
        res = "table-danger";
    }
    else{
        res = "table-default";
    }
    return res;
}

function im_good_2(my_number){
    var res;
    if(parseFloat(my_number) < 500){
        res = "table-success";
    }
    else if(parseFloat(my_number) < 700){
        res = "table-warning";
    }
    else if(parseFloat(my_number) > 700){
        res = "table-danger";
    }
    else{
        res = "table-default";
    }
    return res;
}

function im_positive(my_number){
    var res;
    if(parseFloat(my_number) > 0){
        res = "table-success";
    }
    else if(parseFloat(my_number) < 0){
        res = "table-danger";
    }
    else{
        res = "table-default";
    }
    return res;
}

function im_positive_forme(my_number){
        var res;
        if(parseFloat(my_number) > 6.99){
            res = "table-success";
        }
        else if(parseFloat(my_number) > 6.49){
            res = "table-info";
        }
        else if(parseFloat(my_number) > 5.99){
            res = "table-warning";
        }
        else if(parseFloat(my_number) < 6){
            res = "table-danger";
        }
        else if(parseFloat(my_number) < 0){
            res = "table-danger";
        }
        else{
            res = "table-default";
            console.log(my_number);
        }
        return res;
    }

function dropping_me(odd_arrive, odd_depart){
    return parseFloat(((odd_arrive - odd_depart)/(odd_depart - 1)*100).toFixed(2))
}

function percent_to_odd(percent){
    return 1 / percent * 100
}

function numAverage(a) {
    var b = a.length,
        c = 0, i;
    for (i = 0; i < b; i++){
        c += Number(a[i]);
    }
    return parseFloat((c/b).toFixed(2));
} 

function numAverageHarmo(a) {
    var b = a.length,
        c = 0, i;
    for (i = 0; i < b; i++){
        c += 1 / Number(a[i]);
    }
    return parseFloat((b/c).toFixed(2));
} 

function good_tilt(a_tilt, b_tilt){

    a_tilt = parseInt(a_tilt) 
    b_tilt = parseFloat(b_tilt)

    if (a_tilt < b_tilt) {
        diffTilt = b_tilt - a_tilt
    } else {
        diffTilt = a_tilt - b_tilt
    }

    if (diffTilt >= 90) {
        res = "table-danger";
    } else if (diffTilt >= 60) {
        res = "table-warning";
    } else if (diffTilt <= 25) {
        res = "table-success";
    } else if (diffTilt < 30) {
        res = "table-info";
    } else {
        res = "table-default";
    }

    return res;
}

function percent_to_odd(percent){
    return 1 / percent * 100
}

function diff(odd_depart, odd_arrive){
    return parseFloat((odd_arrive - odd_depart).toFixed(2))
}

function valide(local_note, visitor_note, local_tilt,  visitor_tilt) {
    let valide = "table-success";
    const delta_tilt = Math.abs(parseInt(local_tilt) - parseInt(visitor_tilt));
    if (local_note < 40) {
        valide = "table-info";
    }
    if (visitor_note < 40) {
        valide = "table-info";
    }
    if (local_tilt > 55 || local_tilt < -55) {
        valide = "table-default";
    }
    if (visitor_tilt > 55 || visitor_tilt < -55){
        valide = "table-default";
    }
    if (delta_tilt > 25){
        valide = "table-default";
    }

    return valide;
}



%> 

<form action="" method="post">
    <div class="row">

        <div class="col-4">
            <div class="input-group">
                <select name="sel_file" id="sel_file" class="custom-select" id="inputGroupSelect04" aria-label="Example select with button addon">
                    <option selected>Open</option>
                  <% files.forEach(element => { %>
                    <option value="<%= element %>"><%= element %></option>
                <% }); %> 
                </select>
                <div class="input-group-append">
                  <input class="btn btn-outline-secondary" type="submit" value="Am">
                </div>
            </div>
        </div>
        

    </div>
</form>

<br>

<% if(data){ %> 

    <div class="row">
        <div class="col-12" style="text-align: center;">
            <h1><%= moment(data[0].date).format("llll")  %></h1>
        </div>
    </div>

 
        <table class="table table-striped table-bordered border-secondary" data-toggle="table" data-search="true" data-pagination="true" style="text-align: center;">
            <thead>
                <tr>
                    <th data-sortable="true" scope="col">TIME</th>
                    <th data-sortable="true" scope="col">LEAGUE</th>
                    <!--<th scope="col">ELO</th>
                    <th scope="col">Δ ELO (%)</th>
                    <th scope="col">Δ ELO</th>-->
                    <th scope="col">TEAMS</th>
                    <!--<th data-sortable="true" scope="col">TILT</th>-->
                    <th scope="col">VALIDE</th>
                    <th scope="col">xG</th>
                    
                    <!--<th data-sortable="true" scope="col">Δ FORME</th>-->     
                    <th scope="col">1</th>
                    <th scope="col">N</th>
                    <th scope="col">2</th>
                </tr>
            </thead>
            <tbody>
                <% data.forEach(element=> {  
                    dateTime = element.date + ' ' + element.time
                    id = element.id
                    lgp = parseFloat(element.local_goal_predict)
                    vgp = parseFloat(element.visitor_goal_predict)
                    lt = parseInt(element.local_tilt)
                    vt = parseInt(element.visitor_tilt)

                    nlg = lgp * (1 + lt / 100)
                    nvg = vgp * (1 + vt / 100)

                    normal_distrib = new distrib_poisson(lgp, vgp, 25)
                    matrice_normal = normal_distrib.predict_proba();
                    np = matrice_normal['percent']

                    inc_distrib = new distrib_poisson(nlg, nvg, 25)
                    matrice_inc = inc_distrib.predict_proba();
                    ip = matrice_inc['percent']

                    d1 = diff(percent_to_odd(np[0]), percent_to_odd(ip[0])).toFixed(2)
                    dN = diff(percent_to_odd(np[1]), percent_to_odd(ip[1])).toFixed(2)
                    d2 = diff(percent_to_odd(np[2]), percent_to_odd(ip[2])).toFixed(2)

                    if (parseInt(element.local_elo) > parseInt(element.visitor_elo)) {
                        delta_elo = parseInt(element.local_elo) - parseInt(element.visitor_elo);

                    } else if (parseInt(element.local_elo) < parseInt(element.visitor_elo)) {
                        delta_elo = parseInt(element.visitor_elo) - parseInt(element.local_elo);

                    } else {
                        delta_elo = 0;
                    }
                    
                %>
                    <tr>
                        <td>
                            <%= moment(dateTime).subtract(1,'h').format("HH:mm") %>
                        </td>
                        <td>
                            <%= (element.name_compet).substring(0, 25) %> <% if(element.coef_competition) { %> @<%= parseFloat(element.coef_competition).toFixed(0) %> <% } %>
                        </td>
                        <!--<td>
                            <%= parseInt(element.local_elo) %> - <%= parseInt(element.visitor_elo) %>
                        </td>-->
                        <!--<td class="<%= im_good(element.delta_elo) %>">
                            <%= parseFloat(element.delta_elo) %>
                        </td>
                        <td class="<%= im_good_2(delta_elo) %>">
                            <%= parseFloat(delta_elo) %>
                        </td>-->
                        <td>
                            <%= (element.local_team).substring(0, 15) %> - <%= (element.visitor_team).substring(0, 15) %>
                        </td>



                        <td class="<%= good_tilt(element.local_tilt, element.visitor_tilt) %>">
                            <%= parseInt(element.local_tilt) %> | <%= parseInt(element.visitor_tilt) %> / <%= (parseInt(element.local_tilt) - parseInt(element.visitor_tilt)).toFixed(2) %>
                        </td>

            

                        <td>
                            <%= parseFloat(element.local_goal_predict).toFixed(2) %> / <%= parseFloat(element.visitor_goal_predict).toFixed(2) %>
                        </td>
                        <td class="<%= im_positive(d1) %>">
                            <%= d1 %>
                        </td>
                        <td class="<%= im_positive(dN) %>">
                            <%= dN %>
                        </td>
                        <td class="<%= im_positive(d2) %>">
                            <%= d2 %>
                        </td>
                    </tr>
                <%  }); %>
            </tbody>
        </table>
        <br>
        <p><code>GOOD IS GREEN X2, WITHOUT ISOLATED FALL</code></p>
<% } %>

<%- include('include/footer') -%>