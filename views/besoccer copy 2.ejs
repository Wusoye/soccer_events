<%- include('include/header') -%>

<% 

class ValideMatch {
    #coefLeague
    #IsPricipalLeague = false;

    #local_note
    #visitor_note
    #local_tilt
    #visitor_tilt
    #delta_tilt
    #local_xg
    #visitor_xg
    #classe = 'table-default';
    #ouverture = '';
    #isOpen = false;
    #maxGoal = 25;
    #home_prob = 0;
    #draw_prob = 0;
    #away_prob = 0;
   
   
    constructor(local_note, visitor_note, local_tilt, visitor_tilt, local_xg, visitor_xg, coefLeague){
        this.#coefLeague = coefLeague;
        this.#IsPricipalLeague = this.#coefLeague > 40;
        this.#local_note = parseInt(local_note);
        this.#visitor_note = parseInt(visitor_note);
        this.#local_tilt = parseInt(local_tilt);
        this.#visitor_tilt = parseInt(visitor_tilt);
        this.#delta_tilt = (parseInt(local_tilt) - parseInt(visitor_tilt));
        this.#local_xg = parseFloat(local_xg);
        this.#visitor_xg = parseFloat(visitor_xg);
        this.#poissonPourcent();
    }

    #fact(nbr) {
        var i, nbr, f = 1;
        for (i = 1; i <= nbr; i++) {
            f = f * i;   // ou f *= i;
        }
        return f;
    }

    #poissonPourcent(){

        this.local_distrib = []
        this.visitor_distrib = []

        for (let i = 0; i <= this.#maxGoal; i++) {

            this.k = i
            this.kFact = this.#fact(i)

            this.local = Math.exp(-this.#local_xg) * (Math.pow(this.#local_xg, this.k) / this.kFact)
            this.visitor = Math.exp(-this.#visitor_xg) * (Math.pow(this.#visitor_xg, this.k) / this.kFact)

            this.local_distrib.push(this.local)
            this.visitor_distrib.push(this.visitor)
            
        }

        for (let local_i = 0; local_i < this.local_distrib.length; local_i++) {
            for (let visitor_i = 0; visitor_i < this.visitor_distrib.length; visitor_i++) {

                this.local_prob_score = this.local_distrib[local_i]
                this.visitor_prob_score = this.visitor_distrib[visitor_i]
                

                if (local_i > visitor_i) {
                    this.#home_prob = this.local_prob_score * this.visitor_prob_score + this.#home_prob
                }
                if (local_i == visitor_i) {
                    this.#draw_prob = this.local_prob_score * this.visitor_prob_score + this.#draw_prob
                }
                if (local_i < visitor_i) {
                    this.#away_prob = this.local_prob_score * this.visitor_prob_score + this.#away_prob
                }
            }
        }
    }

    getOuverture(){
        if (this.#home_prob > 0.5 && this.#delta_tilt > 5){
            this.#classe = 'table-success';
            //return '1 | ' + this.#local_note + ' / ' + this.#visitor_note + ' | Δ' + this.#delta_tilt;
        } else if (this.#away_prob > 0.5 && this.#delta_tilt < -5) {
            this.#classe = 'table-success';
            //return '2 | ' + this.#local_note + ' / ' + this.#visitor_note + ' | Δ' + this.#delta_tilt;
        } else if (this.#home_prob < 0.5 && this.#away_prob < 0.5 && Math.abs(this.#delta_tilt) > 30) {
            this.#classe = 'table-info';
            //return 'N | ' + this.#local_note + ' / ' + this.#visitor_note + ' | Δ' + this.#delta_tilt;
        } else {
            //return '';
        } 
    }

    getClass(){
        if (this.#home_prob > 0.5){

            if (this.#delta_tilt > 5) {
                this.#classe = 'table-success';
            } else if(this.#delta_tilt < -5){
                this.#classe = 'table-info';
            }
            
        } else if (this.#away_prob > 0.5) {

            if (this.#delta_tilt < -5) {
                this.#classe = 'table-success';
            } else if(this.#delta_tilt > 5){
                this.#classe = 'table-info';
            }

        }
         
        return this.#classe;
    }

    getInfos(){
        return this.#local_note + ' / ' + this.#visitor_note + ' | ' + this.#local_tilt + ' / ' + this.#visitor_tilt + ' | Δ' + this.#delta_tilt
    }

    getNote(){
        return this.#local_note + ' | ' + this.#visitor_note;
    }

    getIsPricipalLeague(){
        return this.#IsPricipalLeague;
    }
}

%> 

<form action="" method="post" id="form-id">
    <div class="row">

        <div class="col-4">
            <div class="input-group">
                <select name="sel_file" id="sel_file" class="custom-select" id="inputGroupSelect04" aria-label="Example select with button addon" >
                    <option selected value="<% if(file){ %><%= file %><% } %>">Open</option>
                  <% files.forEach(element => { %>
                    <option value="<%= element %>"><%= element %></option>
                <% }); %> 
                </select>
                <div class="input-group-append">
                  <input class="btn btn-outline-secondary" type="submit" value="Am">
                </div>
            </div>
        </div>

        <div class="form-check">
            <input class="form-check-input" type="checkbox" value="true" id="flexCheckDefault" name="showAll" <% if(showAll){ %>checked<% } %>>
            <label class="form-check-label" for="flexCheckDefault" >
                SHOW ALL
            </label>
        </div>

    </div>
</form>

<br>

<% if(data){ %> 

    <div class="row">
        <div class="col-12" style="text-align: center;">
            <h1><%= moment(data[0].date).format("llll")  %></h1>
        </div>
    </div>

 
        <table class="table table-striped table-bordered border-secondary" data-toggle="table" data-search="true" data-pagination="true" style="text-align: center;">
            <thead>
                <tr>
                    <th data-sortable="true" scope="col">TIME</th>
                    <th data-sortable="true" scope="col">LEAGUE</th>
                    <th scope="col">TEAMS</th>
                    <th scope="col">OUVERTURE</th>
                    <th scope="col">xG</th>
                </tr>
            </thead>
            <tbody>
                <% data.forEach(el=> {  
                    dateTime = el.date + ' ' + el.time
                    id = el.id
                    const p1 = new ValideMatch(el.local_note, el.visitor_note, el.local_tilt, el.visitor_tilt, el.local_goal_predict, el.visitor_goal_predict, el.coef_competition);
                    // Valide à partir du : sam. 12 févr. 2022
                    if (p1.getIsPricipalLeague() || showAll) {
                %>
                    <tr>
                        <td>
                            <%= moment(dateTime).subtract(1,'h').format("HH:mm") %>
                        </td>
                        <td>
                            <%= (el.name_compet).substring(0, 100) %> <% if(el.coef_competition) { %>  <% } %>
                        </td>
                        <td>
                            <%= (el.local_team).substring(0, 100) %> - <%= (el.visitor_team).substring(0, 15) %>
                        </td>
                        <td class="<%= p1.getClass() %>">
                            <%= p1.getInfos() %>
                        </td>
                        <td>
                            <%= parseFloat(el.local_goal_predict).toFixed(2) %> | <%= parseFloat(el.visitor_goal_predict).toFixed(2) %>
                        </td>
                    </tr>
                <% }; }); %>
            </tbody>
        </table>
        <br>
        <p><code>GOOD IS GREEN X2, WITHOUT ISOLATED FALL</code></p>
<% } %>

<script>
    var form = document.getElementById("form-id");

    document.getElementById("flexCheckDefault").addEventListener("click", function () {
        form.submit();
    });
</script>

<%- include('include/footer') -%>