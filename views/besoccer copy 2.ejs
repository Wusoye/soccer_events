<%- include('include/header') -%>

<% 

function percent_to_odd(percent){
    return 1 / percent * 100;
}

function proba_to_odd(proba){
    return 1 / proba;
}

function dropping_me(odd_arrive, odd_depart){
    return parseFloat(((odd_arrive - odd_depart)/(odd_depart - 1)*100).toFixed(2));
}

function getCountry(acr_country){
    country_name = null;
    jsonExtPays.forEach(extEl => {
        if (extEl.acr.split('.')[1] == acr_country) {
            country_name = extEl.name
            return country_name
        }
    })
    return country_name
}

class ValideMatch {
    #coefLeague
    #IsPricipalLeague = false;
    #IsPricipalTeams = false;
    #IsAvailable = false;

    #delta_elo = 0;
    #local_note
    #visitor_note
    #local_elo
    #visitor_elo
    #local_tilt
    #visitor_tilt
    #delta_tilt
    #local_xg
    #visitor_xg
    #old_local_goal
    #old_visitor_goal
    #local_goal_add
    #visitor_goal_add
    #classe = 'table-default';
    #isOpen = false;
    #maxGoal = 25;
    #home_prob = 0;
    #draw_prob = 0;
    #away_prob = 0;
    #old_home_prob = 0;
    #old_draw_prob = 0;
    #old_away_prob = 0;
    #limitPercent = 0.405;
    #pWinner = '';
   
   
    constructor(local_note, visitor_note, local_tilt, visitor_tilt, local_xg, visitor_xg, local_elo, visitor_elo, coefLeague){
        this.#coefLeague = parseFloat(coefLeague);
        this.#IsPricipalLeague = this.#coefLeague > 40;
        this.#local_note = parseInt(local_note);
        this.#visitor_note = parseInt(visitor_note);
        this.#IsPricipalTeams = this.#local_note > 30 && this.#visitor_note > 30;
        this.#local_tilt = parseInt(local_tilt);
        this.#visitor_tilt = parseInt(visitor_tilt);
        this.#delta_tilt = (parseInt(local_tilt) - parseInt(visitor_tilt));
        this.#local_xg = parseFloat(local_xg);
        this.#visitor_xg = parseFloat(visitor_xg);
        this.#old_local_goal = parseFloat((this.#local_xg / (1 + this.#local_tilt / 100)));
        this.#old_visitor_goal = parseFloat((this.#visitor_xg / (1 + this.#visitor_tilt / 100)));
        this.#local_goal_add = parseFloat((((this.#local_tilt * this.#old_local_goal) / 100)));
        this.#visitor_goal_add = parseFloat((((this.#visitor_tilt * this.#old_visitor_goal) / 100)));
        this.#IsAvailable = this.#local_xg > 0 && this.#visitor_xg > 0;
        this.#local_elo = parseInt(local_elo);
        this.#visitor_elo = parseInt(visitor_elo);
        //if(parseInt(local_elo) != 625 && parseInt(visitor_elo) != 625){
            if(parseInt(local_elo) > parseInt(visitor_elo)){
                this.#delta_elo = (((parseInt(visitor_elo) - parseInt(local_elo)) / parseInt(local_elo)) * 100).toFixed(2)
            } else if(parseInt(local_elo) < parseInt(visitor_elo)){
                this.#delta_elo = (((parseInt(local_elo) - parseInt(visitor_elo)) / parseInt(visitor_elo)) * 100).toFixed(2)
            }
        //}
        this.#home_prob = this.#poissonPourcent(this.#local_xg, this.#visitor_xg)[0];
        this.#draw_prob = this.#poissonPourcent(this.#local_xg, this.#visitor_xg)[1];
        this.#away_prob = this.#poissonPourcent(this.#local_xg, this.#visitor_xg)[2];

        this.#old_home_prob = this.#poissonPourcent(this.#old_local_goal, this.#old_visitor_goal)[0];
        this.#old_draw_prob = this.#poissonPourcent(this.#old_local_goal, this.#old_visitor_goal)[1];
        this.#old_away_prob = this.#poissonPourcent(this.#old_local_goal, this.#old_visitor_goal)[2];
        this.#ouverture();
    }

    #fact(nbr) {
        var i, nbr, f = 1;
        for (i = 1; i <= nbr; i++) {
            f = f * i;   // ou f *= i;
        }
        return f;
    }

    #poissonPourcent(local_goal, visitor_goal){

        this.local_distrib = []
        this.visitor_distrib = []
        this.home_prob = 0;
        this.draw_prob = 0;
        this.away_prob = 0;

        for (let i = 0; i <= this.#maxGoal; i++) {

            this.k = i
            this.kFact = this.#fact(i)

            this.local = Math.exp(-local_goal) * (Math.pow(local_goal, this.k) / this.kFact)
            this.visitor = Math.exp(-visitor_goal) * (Math.pow(visitor_goal, this.k) / this.kFact)

            this.local_distrib.push(this.local)
            this.visitor_distrib.push(this.visitor)
            
        }

        for (let local_i = 0; local_i < this.local_distrib.length; local_i++) {
            for (let visitor_i = 0; visitor_i < this.visitor_distrib.length; visitor_i++) {

                this.local_prob_score = this.local_distrib[local_i]
                this.visitor_prob_score = this.visitor_distrib[visitor_i]
                

                if (local_i > visitor_i) {
                    this.home_prob = this.local_prob_score * this.visitor_prob_score + this.home_prob
                }
                if (local_i == visitor_i) {
                    this.draw_prob = this.local_prob_score * this.visitor_prob_score + this.draw_prob
                }
                if (local_i < visitor_i) {
                    this.away_prob = this.local_prob_score * this.visitor_prob_score + this.away_prob
                }
            }
        }

        return [this.home_prob, this.draw_prob, this.away_prob];
    }

    #ouverture(){      



        this.diff_goal_add = this.#local_goal_add - this.#visitor_goal_add
        this.total_goal_add = Math.abs(this.#local_goal_add) + Math.abs(this.#visitor_goal_add)
        this.percent_diff_sum = Math.abs(this.#local_goal_add - this.#visitor_goal_add)*100/(Math.abs(this.#local_goal_add) + Math.abs(this.#visitor_goal_add));
        this.percent_diff_total = Math.abs(this.#local_goal_add - this.#visitor_goal_add)*100/(this.#local_xg + this.#visitor_xg);
        this.percent_diff_old_total = Math.abs(this.#local_goal_add - this.#visitor_goal_add)*100/(this.#old_local_goal + this.#old_visitor_goal);
        this.percent_sum_total = this.total_goal_add*100/(this.#local_xg + this.#visitor_xg);
        this.abs_percent_diff_total = Math.abs(Math.abs(this.#local_goal_add) - Math.abs(this.#visitor_goal_add))*100/(this.#local_xg + this.#visitor_xg);
        
        this.percent_local_total = Math.abs(this.#local_goal_add)*100/(this.#local_xg);
        this.percent_visitor_total = Math.abs(this.#visitor_goal_add)*100/(this.#visitor_xg);
        this.delta_percent_total = this.percent_local_total - this.percent_visitor_total
        
        this.total_xg = this.#local_xg + this.#visitor_xg
        this.part_total = (this.total_goal_add*100/this.total_xg)
        this.local_part = (this.#local_xg*100/this.total_xg)
        this.visitor_part = (this.#visitor_xg*100/this.total_xg)
        
        this.drop_1 = dropping_me(proba_to_odd(this.#old_home_prob), proba_to_odd(this.#home_prob))
        this.drop_N = dropping_me(proba_to_odd(this.#old_draw_prob), proba_to_odd(this.#draw_prob))
        this.drop_2 = dropping_me(proba_to_odd(this.#old_away_prob), proba_to_odd(this.#away_prob))

        this.emp_1 = Math.abs(this.#local_xg - this.#old_local_goal)*100/((this.#local_xg + this.#old_local_goal)/2)
        this.emp_2 = Math.abs(this.#visitor_xg - this.#old_visitor_goal)*100/((this.#visitor_xg + this.#old_visitor_goal)/2)

        this.local_less
        this.visitor_less

        if (this.#local_xg < this.#old_local_goal) {
            this.local_less = this.#local_xg;
        } else if (this.#local_xg < this.#old_local_goal) {
            this.local_less = this.#old_local_goal;
        } else {
            this.local_less = this.#local_xg;
        }
        
        if (this.#visitor_xg < this.#old_visitor_goal) {
            this.visitor_less = this.#visitor_xg;
        } else if (this.#visitor_xg < this.#old_visitor_goal) {
            this.visitor_less = this.#old_visitor_goal;
        } else {
            this.visitor_less = this.#visitor_xg;
        }
        
        //this.#pWinner = this.emp_1.toFixed(2) + ' | ' + this.emp_2.toFixed(2)
        //this.#pWinner = this.#local_tilt.toFixed(2)| + ' | ' + this.percent_local_total.toFixed(2) + ' | ' + this.#visitor_tilt.toFixed(2) + ' | ' + this.percent_visitor_total.toFixed(2) + ' | ' + (this.percent_local_total - this.percent_visitor_total).toFixed(2)
        //this.#pWinner = this.diff_goal_add.toFixed(2) + ' | ' + this.percent_diff_sum.toFixed(2) + ' | ' + this.percent_diff_total.toFixed(2) + ' | ' + this.local_part.toFixed(2)  + ' | ' +  this.visitor_part.toFixed(2);
        //this.#pWinner = this.drop_1 + ' | ' + this.drop_N + ' | ' + this.drop_2;
        //this.#pWinner = this.diff_goal_add.toFixed(2) + ' | Î”' + this.#delta_tilt+ ' | ' + this.#local_tilt + ' / ' + this.#visitor_tilt;
        //this.#pWinner = this.#local_xg.toFixed(2) + ' | ' + this.#old_local_goal.toFixed(2) + ' | ' + this.#local_goal_add.toFixed(2) + ' |_| ' + this.#visitor_xg.toFixed(2) + ' | ' + this.#old_visitor_goal.toFixed(2) + ' | ' + this.#visitor_goal_add.toFixed(2);
        //this.#pWinner = this.#local_xg.toFixed(2) + ' | ' + this.#local_goal_add.toFixed(2) + ' |_| ' + this.#visitor_xg.toFixed(2) + ' | ' + this.#visitor_goal_add.toFixed(2);
        //this.#pWinner = this.local_less.toFixed(2) + ' | ' + this.visitor_less.toFixed(2)
        //this.#pWinner = this.#local_goal_add.toFixed(2) + ' | ' + this.#visitor_goal_add.toFixed(2) + ' |_| ' + this.abs_percent_diff_total.toFixed(2);
        //this.#pWinner = this.percent_sum_total.toFixed(2) + ' | ' + this.percent_diff_total.toFixed(2) + ' |_| ' + this.#local_goal_add.toFixed(2) + ' | ' + this.#visitor_goal_add.toFixed(2) + ' | ' + this.percent_diff_old_total.toFixed(2)

        /*
        if (this.drop_1 > 0 && this.#old_home_prob > 0.449) {
            this.#isOpen = true;
            this.#classe = 'table-success';
            this.#pWinner = '1 | ' + this.#pWinner;
        } else if (this.drop_2 > 0 && this.#old_away_prob > 0.449) {
            this.#isOpen = true;
            this.#classe = 'table-success';
            this.#pWinner = '2 | ' + this.#pWinner;
        }
        */

        this.#isOpen = true;
        if (Math.abs(this.drop_1) > 10 && Math.abs(this.drop_2) > 10) {
            //this.#isOpen = true;
            if (this.drop_1 > this.drop_2) {
                this.#pWinner = '1 | ' + this.#pWinner;
            } else if (this.drop_1 < this.drop_2) {
                this.#pWinner = '2 | ' + this.#pWinner;
            }
        }

    }

    getClass(){         
        return this.#classe;
    }

    getOuverture(){         
        return this.#isOpen;
    }

    getInfos(){

        this.res = '';

        //this.res = 'Î”' + this.#delta_elo + ' | ' + this.#local_elo + ' / ' + this.#visitor_elo + ' | Î”' + this.#delta_tilt+ ' | ' + this.#local_tilt + ' / ' + this.#visitor_tilt;

       //this.res = this.#local_goal_add + ' | ' + this.#visitor_goal_add;
        
       //this.res = (this.#local_goal_add - this.#visitor_goal_add).toFixed(2);

       this.res = '' + (this.#home_prob * 100).toFixed(2) + ' | ' + (this.#draw_prob * 100).toFixed(2) + ' | ' + (this.#away_prob * 100).toFixed(2)

        this.res = this.#pWinner + this.res;
        
        return this.res;
    }

    getNote(){
        return this.#local_note + ' | ' + this.#visitor_note;
    }

    getIsPricipalLeague(){
        return this.#IsPricipalLeague;
    }

    getIsPricipalTeams(){
        return this.#IsPricipalTeams;
    }

    getIsAvailable(){
        return this.#IsAvailable;
    }

    getCoefLeague(){
        return this.#coefLeague;
    }

    getDeltaElo(){
        return this.#delta_elo;
    }

    getElo(){
        return [this.#local_elo, this.#visitor_elo];
    }

    getGoalPredict(val){
        if (val == 1) {
            return [this.#local_xg, this.#visitor_xg];
        } else if (val == 2){
            return [this.#old_local_goal, this.#old_visitor_goal];
        } else if (val == 3){
            return [this.#local_goal_add, this.#visitor_goal_add];
        } else {
            return [0, 0];
        }
    }

    getProba(val){
        if (val) {
            return [(this.#old_home_prob * 100).toFixed(0), (this.#old_draw_prob * 100).toFixed(0), (this.#old_away_prob * 100).toFixed(0)];
        } else {
            return [(this.#home_prob * 100).toFixed(0), (this.#draw_prob * 100).toFixed(0), (this.#away_prob * 100).toFixed(0)];
        }
    }

    getTilt(){
        return [this.#local_tilt, this.#visitor_tilt];
    }
}

%> 

<form action="" method="post" id="form-id">
    <div class="row">

        <div class="col-4">
            <div class="input-group">
                <select name="sel_file" id="sel_file" class="custom-select" id="inputGroupSelect04" aria-label="Example select with button addon" >
                    <option selected value="<% if(file){ %><%= file %><% } %>">Open</option>
                  <% files.forEach(element => { %>
                    <option value="<%= element %>"><%= element %></option>
                <% }); %> 
                </select>
                <div class="input-group-append">
                  <input class="btn btn-outline-secondary" type="submit" value="Am">
                </div>
            </div>
        </div>

        <div class="form-check">
            <input class="form-check-input" type="checkbox" value="true" id="flexCheckDefault" name="showAll" <% if(showAll){ %>checked<% } %>>
            <label class="form-check-label" for="flexCheckDefault" >
                SHOW ALL
            </label>
        </div>

    </div>
</form>

<br>

<% if(data){ %> 

    <div class="row">
        <div class="col-12" style="text-align: center;">
            <h1><%= moment(data[0].date).format("llll")  %></h1>
        </div>
    </div>

 
        <table class="table table-striped table-bordered border-secondary" data-toggle="table" data-search="true" data-pagination="true" style="text-align: center;">
            <thead>
                <tr>
                    <th data-sortable="true" scope="col">TIME</th>
                    <th data-sortable="true" scope="col">LEAGUE</th>
                    <th scope="col">TEAMS</th>
                    <th scope="col">OUVERTURE</th>
                    <th scope="col">TILT</th>
                    <!--<th scope="col">ELO</th>
                    <th scope="col">XG</th>
                    <th scope="col">XG ADD</th>-->
                    <th scope="col">NORMAL | NO TILT</th>
                </tr>
            </thead>
            <tbody>
                <% data.forEach(el=> {  
                    dateTime = el.date + ' ' + el.time
                    id = el.id
                    country_compet = ""
                    const p1 = new ValideMatch(el.local_note, el.visitor_note, el.local_tilt, el.visitor_tilt, el.local_goal_predict, el.visitor_goal_predict, el.local_elo, el.visitor_elo, el.coef_competition);
                    // Valide Ã  partir du : sam. 12 fÃ©vr. 2022
                    if ((p1.getOuverture() || showAll) && p1.getIsAvailable()) {

                        if (el.country) {
                            if (getCountry(el.country)) {
                                country_compet = getCountry(el.country);
                            } else {
                                country_compet = el.name_compet;
                            }
                        } else {
                            country_compet = el.name_compet;
                        }
                %>
                    <tr>
                        <td>
                            <%= moment(dateTime).subtract(0,'h').format("HH:mm") %>
                        </td>
                        <td title="<%= el.name_compet %>">
                            <%= (country_compet).substring(0, 15) %> <% if(el.id_compet) { %><% } %>
                        </td>
                        <td>
                            <%= (el.local_team).substring(0, 15) %> - <%= (el.visitor_team).substring(0, 15) %>
                        </td>

                        <td class="<%= p1.getClass() %>">
                            <%= p1.getInfos() %>
                        </td>
                        <td>
                            <%= p1.getTilt()[0] %> | <%= p1.getTilt()[1] %>
                        </td>

                        <td class="user-select-all" style="font-weight: bold;">
                            <%= p1.getGoalPredict(1)[0] %>|<%= p1.getGoalPredict(1)[1] %>|<%= p1.getGoalPredict(2)[0].toFixed(2) %>|<%= p1.getGoalPredict(2)[1].toFixed(2) %>
                        </td>                        
                    </tr>
                <% }; }); %>
            </tbody>
        </table>
        <br>
        <p><code>GOOD IS GREEN X2, WITHOUT ISOLATED FALL</code></p>
<% } %>

<script>
    var form = document.getElementById("form-id");

    document.getElementById("flexCheckDefault").addEventListener("click", function () {
        form.submit();
    });

    function copyToClipBoard() {

        var content = document.getElementById('copyXgs');

        content.select();
        document.execCommand('copy');

        alert("Copied!");
    }
</script>

<%- include('include/footer') -%>