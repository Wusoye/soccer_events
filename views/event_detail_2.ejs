<%- include('include/header_detail') -%>
                <style>
                    h6
                    {
                        text-align: center;
                    }
                </style>

                <% 
                
                function numAverage(a) {
                    var b = a.length,
                        c = 0, i;
                    for (i = 0; i < b; i++){
                      c += Number(a[i]);
                    }
                    return parseFloat((c/b).toFixed(2));
                  } 
                  
                function one_to_many_tab(tab){
                    all1 = []
                    allX = []
                    all2 = []
                    tab.forEach(un_tab => {
                        all1.push(un_tab[un_tab.length-3]),
                        allX.push(un_tab[un_tab.length-2]),
                        all2.push(un_tab[un_tab.length-1])
                    });
                    
                    return [all1, allX, all2];
                  }

                function dropping_me(odd_arrive, odd_depart){
                    return parseFloat(((odd_arrive - odd_depart)/(odd_depart - 1)*100).toFixed(2))
                }
                function dropping_me_modif(odd_arrive, odd_depart){
                    var res = parseFloat(((odd_arrive - odd_depart)/(odd_depart - 1)*100).toFixed(2))

                    if(res < 0){
                        res = -1
                    }
                    else if(res > 0){
                        res = 1
                    }
                    else{
                        res = 0
                    }

                    return res;
                }

                function percent_to_odd(percent){
                    return 1 / percent * 100
                }

                function odds_to_percent(odds){
                    return 1 / odds * 100
                }

                function double_chance(first_odd, second_odd){
                    return (first_odd*second_odd)/(first_odd+second_odd)
                }

                function ecart_type(tab){
                    eff = tab.length,
                    moyenne = numAverage(tab),
                    tab_carre = [],
                    tab.forEach(element => {
                        a = (element - moyenne)**2
                        tab_carre.push(a)
                    });
                    sum_carre = 0
                    tab_carre.forEach(element => {
                        sum_carre = sum_carre + element
                    });
                    return sum_carre / eff
                }

                function my_max(tab){
                    nb_max = 0
                    tab.forEach(element => {
                        if(element > nb_max){
                            nb_max = element
                        }
                    });
                    return nb_max;
                }

                function my_min(tab){
                    nb_min = 100
                    tab.forEach(element => {
                        if(element < nb_min && element != 0){
                            nb_min = element
                        }
                    });
                    return nb_min;
                }

                function im_positive(my_number){
                    var res;
                    if(parseFloat(my_number) > 0){
                        res = "table-success";
                    }
                    else if(parseFloat(my_number) < 0){
                        res = "table-danger";
                    }
                    else if(parseFloat(my_number) < -1 || parseFloat(my_number) > 1){
                        res = "table-warning";
                    }
                    else{
                        res = "table-default";
                    }
                    return res;
                }

                function minus(a, b){
                    if (a < b) {
                        return true
                    } else if (a > b) {
                        return false
                    } else {
                        return false
                    }
                }

                function maximus(a, b){
                    if (a < b) {
                        return false
                    } else if (a > b) {
                        return true
                    } else {
                        return false
                    }
                }

                function drop_xG(a, b) {
                    return ((a-b)/b*100).toFixed(2)
                }

                %> 

                <% 
                k = 0
                history_book = []
                all_opening_1 = []
                all_opening_X = []
                all_opening_2 = []
                all_drop_1 = []
                all_drop_X = []
                all_drop_2 = []
                nd_all_opening_1 = []
                nd_all_opening_X = []
                nd_all_opening_2 = []
                fi_all_opening_1 = []
                fi_all_opening_X = []
                fi_all_opening_2 = []
                history_amount = []
                opening_of_each_book = []
                live_of_each_book = []
                five_to_end_each_book = []
                five_to_end_each_book_val = false
                change_mode = false
                bool_aff_diff = false;
                nb_book = 0
                fo_odds_1 = 0
                fo_odds_N = 0
                fo_odds_2 = 0
                lo_odds_1 = 0
                lo_odds_N = 0
                lo_odds_2 = 0


                fo_date = moment()
                lo_date = moment("12-25-1995", "MM-DD-YYYY")


                if(c_normal.length == 3){
                    norm_odd_1 = percent_to_odd(c_normal[0])
                    norm_odd_X = percent_to_odd(c_normal[1])
                    norm_odd_2 = percent_to_odd(c_normal[2])
                    bool_aff_diff = true;
                }

                if(c_no_tilt.length == 3){
                    nT_odd_1 = percent_to_odd(c_no_tilt[0])
                    nT_odd_X = percent_to_odd(c_no_tilt[1])
                    nT_odd_2 = percent_to_odd(c_no_tilt[2])
                    bool_aff_diff = true;
                }

                if(c_inc.length == 3){
                    inc_odd_1 = percent_to_odd(c_inc[0])
                    inc_odd_X = percent_to_odd(c_inc[1])
                    inc_odd_2 = percent_to_odd(c_inc[2])
                    bool_aff_diff = true;
                }

                Object.keys(items).forEach(function(book){

                    if (book == 'Betfair') {
                        history_exchange_back = items[book]['history_exchange_back'];

                        history_exchange_back.forEach(un_history => {
                            amount_1 = un_history['amount_1']
                            amount_X = un_history['amount_X']
                            amount_2 = un_history['amount_2']
                            date_time = moment(un_history['updated']).format('lll')
                            history_amount.push([date_time, amount_1, amount_X, amount_2])
                        });
                    }
                    
                    if(book != 'Betfair' ){ 

                        nb_book += 1;

                        live = items[book].live
                        all_drop_1.push(live['1'])
                        all_drop_X.push(live['X'])
                        all_drop_2.push(live['2'])

                        history = items[book].history,
                        all_opening_1.push(parseFloat(history[history.length -1]['1']))
                        all_opening_X.push(parseFloat(history[history.length -1]['X']))
                        all_opening_2.push(parseFloat(history[history.length -1]['2']))

                        if (history.length > 2){
                            nd_all_opening_1.push(history[history.length -2]['1'])
                            nd_all_opening_X.push(history[history.length -2]['X'])
                            nd_all_opening_2.push(history[history.length -2]['2'])
                        }

                        if (history.length > 5){
                            fi_all_opening_1.push(history[5]['1'])
                            fi_all_opening_X.push(history[5]['X'])
                            fi_all_opening_2.push(history[5]['2'])

                            fi_nb_opening_1 = history[5]['1']
                            fi_nb_opening_X = history[5]['X']
                            fi_nb_opening_2 = history[5]['2']

                            five_to_end_each_book.push([book, fi_nb_opening_1, fi_nb_opening_X, fi_nb_opening_2])
                            five_to_end_each_book_val = true
                        }

                        
                        
                        if (minus(moment(history[history.length -1]['updated']), fo_date) ) {
                            fo_date = moment(history[history.length -1]['updated'])
                            fo_odds_1 = parseFloat(history[history.length -1]['1'])
                            fo_odds_N = parseFloat(history[history.length -1]['X'])
                            fo_odds_2 = parseFloat(history[history.length -1]['2'])
                        }
                        if (maximus(moment(history[history.length -1]['updated']), lo_date) ) {
                            lo_date = moment(history[history.length -1]['updated'])
                            lo_odds_1 = parseFloat(history[history.length -1]['1'])
                            lo_odds_N = parseFloat(history[history.length -1]['X'])
                            lo_odds_2 = parseFloat(history[history.length -1]['2'])
                        }
                        
                        
                        
                        history_odd_1 = [],
                        history_odd_X = [],
                        history_odd_2 = [],
                        

                        history.forEach(un_history => {
                            history_odd_1.push(un_history['1'])
                            history_odd_X.push(un_history['X'])
                            history_odd_2.push(un_history['2'])
                        });

                        history_book.push([book, numAverage(history_odd_1), numAverage(history_odd_X), numAverage(history_odd_2)])

                        opening_of_each_book.push([book, history[history.length -1]['1'], history[history.length -1]['X'], history[history.length -1]['2'], history[history.length -1]['updated']])
                        live_of_each_book.push([book, live['1'], live['X'], live['2'], live['updated']])
                        
                        //console.log(opening_of_each_book.length, live_of_each_book.length);
                    }; 
                    
                }); 
                        
                        tab_of_all_history_book = one_to_many_tab(history_book),

                        history_book_1 = tab_of_all_history_book[0],
                        history_book_X = tab_of_all_history_book[1],
                        history_book_2 = tab_of_all_history_book[2],

                        average_odd_1 = numAverage(history_book_1), 
                        average_odd_X = numAverage(history_book_X), 
                        average_odd_2 = numAverage(history_book_2),

                        average_opening_1 = numAverage(all_opening_1),
                        average_opening_X = numAverage(all_opening_X),
                        average_opening_2 = numAverage(all_opening_2),

                        max_opening_1 = my_max(all_opening_1),
                        max_opening_X = my_max(all_opening_X),
                        max_opening_2 = my_max(all_opening_2),

                        min_opening_1 = my_min(all_opening_1),
                        min_opening_X = my_min(all_opening_X),
                        min_opening_2 = my_min(all_opening_2),
                        
                        ecart_type_1 = ecart_type(all_opening_1),
                        ecart_type_X = ecart_type(all_opening_X),
                        ecart_type_2 = ecart_type(all_opening_2),

                        percent_opening_1 = odds_to_percent(average_opening_1),
                        percent_opening_X = odds_to_percent(average_opening_X),
                        percent_opening_2 = odds_to_percent(average_opening_2),

                        new_percent_opening_1 = percent_opening_1 + (percent_opening_X/2),
                        new_percent_opening_2 = percent_opening_2 + (percent_opening_X/2),

                        new_opening_1 = percent_to_odd(new_percent_opening_1),
                        new_opening_2 = percent_to_odd(new_percent_opening_2),

                        nd_average_opening_1 = numAverage(nd_all_opening_1),
                        nd_average_opening_X = numAverage(nd_all_opening_X),
                        nd_average_opening_2 = numAverage(nd_all_opening_2),

                        fi_average_opening_1 = numAverage(fi_all_opening_1),
                        fi_average_opening_X = numAverage(fi_all_opening_X),
                        fi_average_opening_2 = numAverage(fi_all_opening_2),
                        
                        average_drop_1 = numAverage(all_drop_1),
                        average_drop_X = numAverage(all_drop_X),
                        average_drop_2 = numAverage(all_drop_2),

                        max_drop_1 = my_max(all_drop_1),
                        max_drop_X = my_max(all_drop_X),
                        max_drop_2 = my_max(all_drop_2),

                        min_drop_1 = my_min(all_drop_1),
                        min_drop_X = my_min(all_drop_X),
                        min_drop_2 = my_min(all_drop_2),

                        percent_drop_1 = odds_to_percent(average_drop_1),
                        percent_drop_X = odds_to_percent(average_drop_X),
                        percent_drop_2 = odds_to_percent(average_drop_2),

                        new_percent_drop_1 = percent_drop_1 + (percent_drop_X/2),
                        new_percent_drop_2 = percent_drop_2 + (percent_drop_X/2),

                        new_drop_1 = percent_to_odd(new_percent_drop_1),
                        new_drop_2 = percent_to_odd(new_percent_drop_2),
                         
                        //percent_drop_1 = ((average_drop_1 - average_opening_1)/(average_opening_1 - 1)*100).toFixed(2)
                        percent_drop_1 = dropping_me(average_drop_1, average_opening_1)
                        percent_drop_X = dropping_me(average_drop_X, average_opening_X)
                        percent_drop_2 = dropping_me(average_drop_2, average_opening_2)

                        first_percent_drop_1 = dropping_me(nd_average_opening_1, average_opening_1)
                        first_percent_drop_X = dropping_me(nd_average_opening_X, average_opening_X)
                        first_percent_drop_2 = dropping_me(nd_average_opening_2, average_opening_2)

            //console.log(.hometeam.name +"-"+ infos.awayteam.name +":"+ number_of_verity);
            %> 
            
        <br>
        <h3 style="text-align: center;">AVERAGE ODDS</h3>
        <br>
        <table class="table table-striped table-bordered border-secondary" data-toggle="table">
            <thead>
                <tr style="text-align: center;">
                    <th>Type</th>
                    <th>1 </th>
                    <th>N </th>
                    <th>2 </th>
                    <th>Margin </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Oppening  odds</td>
                    <td><%= average_opening_1 %></td>
                    <td><%= average_opening_X %></td>
                    <td><%= average_opening_2 %></td>
                    <td><%= ((1/average_opening_1 + 1/average_opening_X + 1/average_opening_2)*100-100).toFixed(2) %></td>
                </tr>
               
                <tr>
                    <td>Live odds</td>
                    <td><%= average_drop_1 %></td>
                    <td><%= average_drop_X %></td>
                    <td><%= average_drop_2 %></td>
                    <td><%= ((1/average_drop_1 + 1/average_drop_X + 1/average_drop_2)*100-100).toFixed(2) %></td>
                </tr>
                <tr>
                    <td>Dropping odds</td>
                    <td><%= percent_drop_1 %>% </td>
                    <td><%= percent_drop_X %>% </td>
                    <td><%= percent_drop_2 %>% </td>
                    <td><%= nb_book %> / 23</td>
                </tr>
            </tbody>
        </table>
        <br>
                

        <form action="" method="POST">
            <h5 style="text-align: center">PREDICTION PERCENT</h5>

            <br>
            <h6>Goals prédiction</h6>
            <div class="row justify-content-md-center" style="text-align: center">
                <div class="col">
                    <input placeholder="Local goals" type="text" class="form-control" id="local_goal" name="local_goal" value=<% if(goals_predictions[0]){ %>"<%=
                    goals_predictions[0] %>"<%}%>>
                </div>
                <div class="col">
                    <input placeholder="Visitor goals" type="text" class="form-control" id="visitor_goal" name="visitor_goal" value=<% if(goals_predictions[1]){ %>"<%=
                    goals_predictions[1] %>"<%}%>>
                </div>
            </div>

            <br>
            <h6>Tilt</h6> <!--Diminution du xG par le tilt-->
            <div class="row justify-content-md-center" style="text-align: center">
                <div class="col">
                    <input placeholder="Local tilt" type="text" class="form-control" id="local_inc" name="local_tilt" value=<% if(tilt[0]){ %>"<%=
                    tilt[0] %>"<%}%>>
                </div>
                <div class="col">
                    <input placeholder="Visitor tilt" type="text" class="form-control" id="visitor_inc" name="visitor_tilt" value=<% if(tilt[1]){ %>"<%=
                    tilt[1] %>"<%}%>>
                </div>
            </div>

            <!--<br>
            <h6>Elo inclinaison</h6> Augmentation du xG par l'inclinaison
            <div class="row justify-content-md-center" style="text-align: center">
                <div class="col">
                    <input placeholder="Local inclinaison" type="text" class="form-control" id="local_inc" name="local_inc" value=<% if(elo_inc[0]){ %>"<%=
                    elo_inc[0] %>"<%}%>>
                </div>
                <div class="col">
                    <input placeholder="Visitor inclinaison" type="text" class="form-control" id="visitor_inc" name="visitor_inc" value=<% if(elo_inc[1]){ %>"<%=
                    elo_inc[1] %>"<%}%>>
                </div>
            </div>-->

            <br>
            <div class="row justify-content-md-center">
                <div class="col col-6 col-md-1">
                    <button type="submit" class="btn btn-primary btn-sm">valider</button>
                </div>
            </div>
        </form>
        <br>

        <% if(bool_aff_diff){ %>
        <br>
        <h5 style="text-align: center">OPPENING / PREDICTION</h5>
        <br>
        <div class="row">
            
            <div class="col-12">
                <h6>AVERAGE / NORMAL</h6>
                <table style="text-align: center;" class="table table-striped table-bordered border-secondary" data-toggle="table">
                    <thead>
                        <tr style="text-align: center;">
                            <th scope="col">Type</th>
                            <th scope="col">1</th>
                            <th scope="col">N</th>
                            <th scope="col">2</th>
                        </tr>
                    </thead>
        
                    <tbody>
                        <tr>
                            <td>Average</td>
                            <td class="<%= im_positive(dropping_me(average_opening_1, norm_odd_1)) %>" > 
                                <%= dropping_me(average_opening_1, norm_odd_1) %> % 
                            </td>
                            <td class="<%= im_positive(dropping_me(average_opening_X, norm_odd_X)) %>" >
                                <%= dropping_me(average_opening_X, norm_odd_X) %> % 
                            </td>
                            <td class="<%= im_positive(dropping_me(average_opening_2, norm_odd_2)) %>" >
                                <%= dropping_me(average_opening_2, norm_odd_2) %> % 
                            </td>
                        </tr>
                        <tr>
                            <td>Max</td>
                            <td class="<%= im_positive(dropping_me(max_opening_1, norm_odd_1)) %>" >
                                <%= dropping_me(max_opening_1, norm_odd_1) %> % 
                            </td>
                            <td class="<%= im_positive(dropping_me(max_opening_X, norm_odd_X)) %>">
                                <%= dropping_me(max_opening_X, norm_odd_X) %> % 
                            </td>
                            <td class="<%= im_positive(dropping_me(max_opening_2, norm_odd_2)) %>" >
                                <%= dropping_me(max_opening_2, norm_odd_2) %> % 
                            </td>
                        </tr>
                        <tr>
                            <td>Min</td>
                            <td class="<%= im_positive(dropping_me(min_opening_1, norm_odd_1)) %>" >
                                <%= dropping_me(min_opening_1, norm_odd_1) %> % 
                            </td>
                            <td class="<%= im_positive(dropping_me(min_opening_X, norm_odd_X)) %>" >
                                <%= dropping_me(min_opening_X, norm_odd_X) %> % 
                            </td>
                            <td class="<%= im_positive(dropping_me(min_opening_2, norm_odd_2)) %>" >
                                <%= dropping_me(min_opening_2, norm_odd_2) %> % 
                            </td>
                        </tr>
                        <!--<tr>
                            <td>Last opening</td>
                            <td class="<%= im_positive(dropping_me(lo_odds_1, norm_odd_1)) %>" >
                                <%= dropping_me(lo_odds_1, norm_odd_1) %> % 
                            </td>
                            <td class="<%= im_positive(dropping_me(lo_odds_N, norm_odd_X)) %>" >
                                <%= dropping_me(lo_odds_N, norm_odd_X) %> % 
                            </td>
                            <td class="<%= im_positive(dropping_me(lo_odds_2, norm_odd_2)) %>" >
                                <%= dropping_me(lo_odds_2, norm_odd_2) %> % 
                            </td>
                        </tr>
                        <tr>
                            <td>First opening</td>
                            <td class="<%= im_positive(dropping_me(fo_odds_1, norm_odd_1)) %>" >
                                <%= dropping_me(fo_odds_1, norm_odd_1) %> % 
                            </td>
                            <td class="<%= im_positive(dropping_me(fo_odds_N, norm_odd_X)) %>" >
                                <%= dropping_me(fo_odds_N, norm_odd_X) %> % 
                            </td>
                            <td class="<%= im_positive(dropping_me(fo_odds_2, norm_odd_2)) %>" >
                                <%= dropping_me(fo_odds_2, norm_odd_2) %> % 
                            </td>
                        </tr>-->
                        
                    </tbody>
                </table>
            </div>
        </div>

        <br>

        <div class="row">
            <div class="col-12">
        
                <h6>PROBABILITY</h6>
                <table style="text-align: center;" class="table table-striped table-bordered border-secondary"
                    data-toggle="table">
                    <thead>
                        <tr style="text-align: center;">
                            <th scope="col">Type</th>
                            <th scope="col">1</th>
                            <th scope="col">N</th>
                            <th scope="col">2</th>
                        </tr>
                    </thead>
        
                    <tbody>
                        <tr>
                            <td>NORMAL</td>
                            <td>
                                <%= c_normal[0].toFixed(2) %> %
                            </td>
                            <td>
                                <%= c_normal[1].toFixed(2) %> %
                            </td>
                            <td>
                                <%= c_normal[2].toFixed(2) %> %
                            </td>
                        </tr>
                        <tr>
                            <td>NO TILT</td>
                            <td>
                                <%= c_no_tilt[0].toFixed(2) %> %
                            </td>
                            <td>
                                <%= c_no_tilt[1].toFixed(2) %> %
                            </td>
                            <td>
                                <%= c_no_tilt[2].toFixed(2) %> %
                            </td>
                        </tr>
                        <tr>
                            <td>NO TILT / NORMAL</td>
                            <td
                                class="<%= im_positive((dropping_me(nT_odd_1, norm_odd_1)).toFixed(2)) %>">
                                <%= dropping_me(nT_odd_1, norm_odd_1).toFixed(2) %> 
                            </td>
                            <td
                                class="<%= im_positive((dropping_me(nT_odd_X, norm_odd_X)).toFixed(2)) %>">
                                <%= dropping_me(nT_odd_X, norm_odd_X).toFixed(2) %> 
                            </td>
                            <td
                                class="<%= im_positive((dropping_me(nT_odd_2, norm_odd_2)).toFixed(2)) %>">
                                <%= dropping_me(nT_odd_2, norm_odd_2).toFixed(2) %> 
                            </td>
                        </tr>
                        <tr>
                            <td>NO TILT / NORMAL (XG)</td>
                            <td
                                class="<%= im_positive((drop_xG(goals_predictions[0], tilt[0]))) %>">
                                <%= drop_xG(goals_predictions[0], tilt[0]) %> 
                            </td>
                            <td>
                            
                            </td>
                            <td
                                class="<%= im_positive((drop_xG(goals_predictions[1], tilt[1]))) %>">
                                <%= drop_xG(goals_predictions[1], tilt[1]) %> 
                            </td>
                        </tr>
                        
                    </tbody>
                </table>
            </div>
        </div>
        
        <br>

        <% 
            }; 
        %>

        <!--<table class="table table-striped table-bordered border-secondary" data-toggle="table">
            <thead>
                <tr style="text-align: center;">
                    <th>Type</th>
                    <th>1 </th>
                    <th>N </th>
                    <th>2 </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Oppening  drop</td>
                    <td><%= dropping_me(lo_odds_1, fo_odds_1) %></td>
                    <td><%= dropping_me(lo_odds_N, fo_odds_N) %></td>
                    <td><%= dropping_me(lo_odds_2, fo_odds_2) %></td>
                </tr>
            </tbody>
        </table>
        <br>-->

        <button class="btn btn-light btn-md btn-block" type="button" data-toggle="collapse" data-target="#detail_drop_by_book" aria-expanded="false" aria-controls="detail_drop_by_book">
        DETAIL DROP BY BOOK
        </button>

        <br>
        <div class="collapse multi-collapse" id="detail_drop_by_book">
        <table class="table table-striped table-bordered border-secondary" data-toggle="table">
            <thead>
                <tr style="text-align: center;">
                    <th scope="col" data-sortable="true">Bookmaker</th> <!-- Average of Bookmaker -->
                    <th scope="col" data-sortable="true">1</th>
                    <th scope="col" data-sortable="true">N</th>
                    <th scope="col" data-sortable="true">2</th>
                    <th scope="col" data-sortable="true">Opening date</th>
                </tr>
            </thead>

            <tbody>
                <% 
                    Object.keys(opening_of_each_book).forEach(function(book){ 
                            
                        opening_1 = opening_of_each_book[book][1], 
                        opening_X = opening_of_each_book[book][2], 
                        opening_2 = opening_of_each_book[book][3],
                        opening_date = opening_of_each_book[book][4],
                        live_1 = live_of_each_book[book][1], 
                        live_X = live_of_each_book[book][2], 
                        live_2 = live_of_each_book[book][3],
                        date_live = moment(live_of_each_book[book][4]).add(2,'h').format('lll'), //YYYY MMM D HH:mm
                        un_book = opening_of_each_book[book][0];

                    %>
                <tr>
                    <td>
                        <%= date_live %> / <%= un_book %>
                    </td>
                
                    <td>
                        <%= dropping_me(live_1, opening_1) %> %
                    </td>
                    <td>
                        <%= dropping_me(live_X, opening_X) %> %
                    </td>
                    <td>
                        <%= dropping_me(live_2, opening_2) %> %
                    </td>
                    <td>
                        <%= moment(opening_date).from(infos.time) %> <!--/ <%= moment(opening_date).format('lll') %>-->
                    </td>
                
                </tr>

                <% 
                    }); 
                %>
            </tbody>
        </table>
    </div>

    <p><%= infos.hometeam.name %>_<%= infos.awayteam.name %>_<%= moment(infos.time).add(1,'h').format('lll') %></p>
               
    <%- include('include/footer') -%>